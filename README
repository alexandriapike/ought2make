# a simple replacement for autoconf

# ./configure --libname=new_project_name && make

# delete ought2make's .git directory



A header file will be automatically generated as
include/new_project_name/new_project_name.h 
	If your project is a library then this will be the public definitions
	for developers linking against your library. it is only for
	data type and function prototypes.

An internal private header file will be automatically generated as
src/internal.h
	This file is where you should define your data types,
	structures, functions and internal functions. 

A basic executable file will be automatically generated as
tests/new_project_name.c
	This file will be set up to contain:
		#define <new_project_name/new_project_name.h>
		int main(void) { return 0;};

A basic object file will be automatically generated as
src/new_project_name.c
	This file will not be an executable and will be
	compiled automatically when you invoke `make'
	into a .o object file


game programmers:
all source code goes into src/
main() will need to be in tests/
your game .c executable should look something like this:
#include <mygame/mygame.h>

int main(void)
{
	mygame();
	return 0;
}


library authors:
all code goes into src/
all library tests go into tests/
your library test executables should look something like this:

#include <mylibrary/mylibrary.h>

int main(void)
{
	mylib_function();
        return 0;
}


Library authors and game programmers:
	The file .config is library code that the configure
	script needs so don't forget to upload it with
	your project to revision control.

	After you have added your code into src/ and tests/
	run `make' again. It does not matter what the files
	are named: all files in src/ become object code and
	all files in tests/ become executable. As long as
	the files end in .c and are in these directories the
	makefile will detect them with glob expansion. This
	is the very core functionality that the autoconf
	build system supplies to programmers. In this way,
	the build system is simply a manifestation of Steven
	Kleene's "Kleene closure" automata in the form of 
	glob expansion.
	
	All object code from src/ is automatically compiled
	and put into libnew_project_name.a. Library authors
	will instantly recognize this as the library for
	their project. Game programmers will not install
	this library or headers in include/ -- but instead
	will install their main executable in tests/.

	Library authors will not install the programs in
	tests/ but instead will of course install 
	libnew_project_name.a and the contents of include/

	Game programmers may enjoy having multiple versions
	of their game in tests/ in the same way that library
	authors have multiple executables in tests/ to
	test their library.



The process used by ought2make is one of creating opaque
private structures or objects. This is a sophisticated 
method and is used by libraries such as GMP, OpenSSL,
Xlib and ncurses. It is the model that the standard C
library uses, and for example, is why a programmer
can not access the structure members of the FILE
data type. If you want to allow a programmer using
your library or in this abstracted manner, the library
of your executable game -- allow them to access the 
opaque objects using functions. For instance

struct opaque_object {
	int dogs;
	int cats;
	int rainclouds;
}

add_more_dogs(opaque_object *a, int number)
{
	a->dogs += number;
}

Discussion:

Object opacity is almost always a best practice method. The
opaque objects used by early C programmers was adopted into
C++ and became the concept of public and private classes.

Object opacity allows the programs that access a library
to continue to use the same code even when the internal
workings of the library may have changed greatly.

It is possible to use the makefile and configure script
of ought2make in many ways. However, if a library or
game programmer follows the methods outlined by ought2make
they can begin programming and scripting automated tests
very quickly.

Much of the complicated process of building libraries is
abstracted under LDFLAGS in ought2make's makefile. It is my
hope that game programmers and library authors take the project
apart and explore learning the makefile programming language.

Good luck and have fun!

Alexa
